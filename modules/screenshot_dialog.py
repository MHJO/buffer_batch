# -*- coding: utf-8 -*-
"""
/***************************************************************************
 screenshot_Dialog
                                 A QGIS plugin
 gis_my_tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-01-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by mh
        email                : mh.cho058@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import shutil

from PyQt5.QtWidgets import (
    QFileDialog,QApplication,QMessageBox,QListView,QAbstractItemView,QTreeView
)
from PyQt5.QtGui import QIcon,QPixmap
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis import processing
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__))+"/ui", 'screenshot_dialog_base.ui'))

class screenshot_Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(screenshot_Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self._map_canvas = iface.mapCanvas()

        self.setupUi(self)
        self.init_ui()
        self.listener()

    def init_ui(self):
        self.lb_layers.setText(self.tr("레이어명"))
        self.lb_attrs.setText(self.tr("속성 선택"))
        # self.txt_output.setText("") # 초기화
        self.btn_refresh.setIcon(QIcon(':refresh'))
        self.cmbSetting()

    def listener(self):
        self.btn_refresh.clicked.connect(self.mapRefresh)
        self.changedSync()

    def mapRefresh(self):
        self._map_canvas.refresh()
        self.cmbSetting()

    def changedSync(self):
        # combo event
        self.cbx_layers.currentIndexChanged.connect(self.getAttrs)
        self.cbx_attrs.currentIndexChanged.connect(self.getAttrValue)

    def cmbSetting(self):
        # 레이어 목록을 가져옴
        self.getlyr = self.get_lyrList()
        self.cbx_layers.addItems(self.getlyr[0])
        self.getAttrs()

    def get_lyrList(self):
        self.cbx_layers.clear()
        layersNames = ["선택"]
        layers = list()
        for i in self._map_canvas.layers():
            layersNames.append(str(i.name()))
            layers.append(i)
        return layersNames, layers

    def getAttrs(self):
        self.cbx_attrs.blockSignals(True)
        self.cbx_attrs.clear()
        if self.cbx_layers.currentIndex() !=0:
            layers = self.getlyr[1]
            idx = self.cbx_layers.currentIndex() -1

            header = [i.upper() for i in layers[idx].fields().names()]
            self.cbx_attrs.addItems(header)

    def getAttrValue(self):
        self.cbx_attrsV.blockSignals(True)
        self.cbx_attrsV.clear()
        layers = self.getlyr[1]
        idx = self.cbx_layers.currentIndex() - 1
        feats = layers[idx].getFeatures()
        attrList=list()
        for count, feat in enumerate(feats):
            attrList.append(feat[self.cbx_attrs.currentText()])
        self.cbx_attrsV.addItems(attrList)





